var Posts = require('./models/posts'),
    Contact = require('./models/contact'),
    Menu = require('./models/menu'),
    Users = require('./models/user'),
    Comments = require('./models/comment'),
    Answers = require('./models/answer'),
    Types = require('./models/type'),
    Cates = require('./models/category'),
    Media = require('./models/media'),
    flash = require('connect-flash'),
    CMedia = require('./models/media_category');

var Promise = require('bluebird'),
    mongoose = require('mongoose');
Promise.promisifyAll(mongoose);

module.exports = function(app) {
    app.use('/*', loadFrame);
    app.get('/', function(req, res) {
        res.render('home/index', {
            data: req.frame,
            title: 'Trang chủ'
        });
    });
    app.get('/tim-kiem', function(req, res) {
        res.send(req.query.s);
    });
    app.get('/thong-tin-ca-nhan', isLoggedIn, function(req, res) {
        res.render('home/profile', {
            data: req.frame,
            title: 'Thông tin cá nhân'
        });
    });
    app.get('/lien-he', function(req, res) {
        Contact.findOne().exec(function(err, c){
            req.frame.contact = c;
            res.render('home/contact', {
                data: req.frame,
                layout: 'layoutnull',
                title: 'Liên hệ'
            });
        });
        
    });
    app.get('/video', function(req, res) {
        res.render('home/video', {
            data: req.frame,
            title: 'Video'
        });
    });
    app.get('/dang-nhap', function(req, res) {
        res.render('home/login-member', {
            data: req.frame,
            title: 'Đăng nhập',
            message: req.flash('message')
        });
    });
    app.get('/dang-ky', function(req, res) {
        res.render('home/register-member', {
            data: req.frame,
            title: 'Đăng ký',
            message: req.flash('message')
        });
    });
    app.get('/thong-bao', function(req, res) {
        res.render('home/report', {
            data: req.frame,
            title: 'Thông báo',
            message: req.flash('message')
        });
    });
    app.get('/:p', function(req, res, next) {
        Posts.findOne({url: req.params.p}, function(err, p){
            if(!p) return next();
            req.frame.post = p;
            Comments.find({pid: p._id}).sort({_id: -1}).exec(function(err, c){
                renderComment(0, c, [], function(c){
                    req.frame.comments = c;
                    res.render('home/post-detail', {
                        data: req.frame,
                        title: p.name,
                        message: req.flash('message')
                    });
                });
            }); 
        });
    });
    app.get('/:c', function(req, res, next) {

        Cates.findOne({url: req.params.c}).exec(function(err, c){
            if(!c) return next();
            req.frame.category = c;
            if (req.query.page) {
                var page = req.query.page;
            } else {
                var page = 1;
            }
            if (req.query.record) {
                var record = req.query.record;
            } else {
                var record = 10;
            }
            Posts.find({'category.url': req.params.c}).exec(function(err, ps){
                Posts.find({
                    'category.url': req.params.c
                }).sort({
                    _id: -1
                }).skip(page * record - record).limit(record).exec(function(err, p) {
                    req.frame.inCate = p;
                    res.render('home/category', {
                        data: req.frame,
                        total: Math.ceil(ps.length / record),
                        current: page,
                        title: c.name
                    });
                });
            });
            
        });
    });

    app.get('/:t', function(req, res, next) {
        Types.findOne({url: req.params.t}).exec(function(err, t){
            if(!t) return next();
            req.frame.type = t;
            res.render('home/type', {
                data: req.frame,
                title: t.name
            });
        });
    });
    app.get('/:v', function(req, res, next) {
        Media.findOne({url: req.params.v, media: 'video'}, function(err, v){
            if(!v) return next();
            req.frame.video = v;
            res.render('home/video-detail', {
                data: req.frame,
                title: v.name
            });
        })
    });
    app.get('/:cv', function(req, res, next) {
        res.send(req.params.cv);
    });
    app.post('/comment/:pid', function(req, res) {
        if (req.body.cid) {
            new Answers({
                cid: req.body.cid,
                content: req.body.content,
                user: {
                    fullname: req.body.fullname,
                    username: req.body.email
                }
            }).save(function(err, a) {
                return res.redirect('/' + req.params.pid);
            });
        } else {
            new Comments({
                pid: req.params.pid,
                user: {
                    fullname: req.body.fullname,
                    username: req.body.email
                },
                content: req.body.content
            }).save(function(err, c) {
                return res.redirect('/' + req.params.pid);
            });
        }
    });
    app.get('/test/makeMenu', function(req, res) {
        Types.find({}, function(err, t) {
            makeMenu(0, t, function(type) {
                res.json(type);
            });
        });
    });

    function makeUrl(str) {
        var str = str.toString().trim().toLowerCase();
        return str.replace(/á|ạ|ả|ã|à|ă|ắ|ẳ|ặ|â|ấ|ậ|ẫ/g, 'a').replace(/é|ẹ|ẻ|è|ê|ế|ệ|ề|ể/g, 'e').replace(/ó|ọ|ỏ|ò|õ|ô|ố|ộ|ổ|ồ|ỗ|ố|ơ|ớ|ở|ờ|ợ/g, 'o').replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, 'u').replace(/ì|í|ị|ỉ|ĩ/g, 'i').replace(/ỳ|ý|ỵ|ỷ|ỹ/g, 'y').replace(/đ/g, 'd').replace(/:|( -)/g, '').replace(/\n|\r| /g, '-');
    }

    function first(i, arr, id) {
        if (arr.length != 0) {
            if (arr[i].type._id == id) {
                return arr[i];
            } else {
                i++;
                first(i, arr, id);
            }
        }
    }
    var menu = [];

    function makeMenu(i, type, callback) {
        Cates.find({
            'type._id': type[i]._id
        }, function(err, c) {
            type[i].category = c;
            i++;
            if (i == type.length) {
                return callback(type);
            }
            makeMenu(i, type, callback);
        });
    }
    app.get('/*', function(req, res) {
        res.redirect('/');
    });

    function renderComment(i, arr, result, callback) {
        if (arr.length == 0) {
            return callback([]);
        }
        if (i < arr.length) {
            Answers.find({
                cid: arr[i]._id
            }).exec(function(err, a) {
                result.push({
                    comment: arr[i],
                    answers: a
                });
                i++;
                renderComment(i, arr, result, callback);
            });
        }
        if (i == arr.length) {
            return callback(result);
        }
    }

    function isLoggedIn(req, res, next) {
        if (req.user) {
            return next();
        }
        return res.redirect('/');
    }

    function loadFrame(req, res, next) {
        Promise.props({
            menu: Menu.find().execAsync(),
            posts: Posts.find().sort({_id: -1}).execAsync(),
            categories: Cates.find().execAsync(),
            types: Types.find().execAsync(),
            medias: Media.find().sort({_id: -1}).execAsync(),
            cmedias: CMedia.find().sort({_id: -1}).execAsync(),
            user: req.user
        }).then(function(results) {
            req.frame = results;
            return next();
        });
    }

}